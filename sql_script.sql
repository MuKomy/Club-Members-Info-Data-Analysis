set search_path to cleaning_data;
ALTER TABLE club_members_info
DROP COLUMN id ;
SELECT * FROM club_members_info;

ALTER TABLE member_info
ADD id bigint GENERATED BY DEFAULT AS IDENTITY,
ADD full_name VARCHAR(255),
ADD age INT,
ADD martial_status VARCHAR(255),
ADD email VARCHAR(255),
ADD phone VARCHAR(255),
ADD full_address VARCHAR(255),
ADD job_title VARCHAR(255),
ADD membership_date DATE;

SELECT * FROM member_info;


SELECT * FROM cleaning_data.member_info;


CREATE TABLE cmi_staging2 AS SELECT * FROM cmi_staging;
SELECT * FROM cmi_staging;


SELECT 
    SUBSTR(full_name, 1, length(full_name) - length(SUBSTRING_INDEX(full_name, ' ', -1)) - 1) as first_name, 
    SUBSTRING_INDEX(full_name, ' ', -1) as last_name 
FROM cmi_staging;

SELECT regexp_replace(full_name,'\s\S+','') as first_name FROM cmi_staging1;
SELECT regexp_replace(full_name,'.+[\s]','') as last_name FROM cmi_staging;
SELECT full_name FROM cmi_staging2;

SELECT full_name FROM cleaning_data.cmi_staging ;
SELECT full_name FROM cleaning_data.cmi_staging1 ;

UPDATE cleaning_data.cmi_staging1 
SET full_name = TRIM(full_name);

UPDATE cleaning_data.cmi_staging1 
SET full_name = SUBSTRING(full_name, 4) WHERE full_name LIKE '?%';
CREATE TABLE cmi_staging1 AS SELECT * FROM cmi_staging;


-- cmi_staging1 has full_name cleaned from '???' and trimmed

SELECT SUBSTRING(full_name FROM '^\s*[^ ]+\s+(.*)$') AS last_name
FROM cmi_staging1 ;

WITH full_name_CTE AS(
	SELECT id,
	full_name,
	REGEXP_REPLACE(SPLIT_PART(full_name, ' ', 1), '[^a-zA-Z\-]', '', 'g') AS first_name,
	SUBSTRING(full_name FROM '^\s*[^ ]+\s+(.*)$') AS last_name
	FROM cleaning_data.cmi_staging1
)
-- ,
-- compare_full_names_CTE AS(
-- SELECT *, CONCAT(first_name, ' ', last_name) AS FULLNAME
-- FROM full_name_CTE
-- )
-- SELECT *
-- FROM compare_full_names_CTE
-- WHERE full_name = FULLNAME
--;

SELECT SUBSTRING(full_name FROM '^\s*[^ ]+\s+(.*)$') AS last_name
FROM cmi_staging1 ;

SELECT full_name,SUBSTRING(full_name, 4) FROM cmi_staging WHERE full_name LIKE '?%';


CREATE TABLE cmi_staging2 AS
SELECT id,
REGEXP_REPLACE(SPLIT_PART(full_name, ' ', 1), '[^a-zA-Z\-]', '', 'g') AS first_name,
SUBSTRING(full_name FROM '^\s*[^ ]+\s+(.*)$') AS last_name,
age,
martial_status,
email,
phone,
full_address,
job_title,
membership_date
FROM cmi_staging1;
SELECT * FROM cmi_staging2;

-- If you just want to reassign IDs based on row order:
UPDATE cmi_staging2
SET member_id = new_ids.new_id
FROM (
  SELECT member_id, ROW_NUMBER() OVER () AS new_id
  FROM cmi_staging2
) AS new_ids
WHERE cmi_staging2.member_id = new_ids.member_id;


SELECT * FROM club_members_info;
SELECT * FROM cmi_staging2;

WITH cte AS (
SELECT ROW_NUMBER() OVER() AS id,age,martial_status,email,phone,full_address,job_title,membership_date
--ROW_NUMBER() OVER(ORDER BY age,martial_status,email,phone,full_address,job_title,membership_date)
FROM club_members_info
)
--SELECT * FROM members_cte
UPDATE cmi_staging2 AS cmi 
SET member_id = cte.id
FROM cte 
WHERE cmi.age = cte.age AND
cmi.martial_status = cte.martial_status AND
cmi.email = cte.email AND
cmi.phone = cte.phone AND
cmi.full_address = cte.full_address AND
cmi.job_title = cte.job_title AND
cmi.membership_date = cte.membership_date
;

SELECT * FROM cmi_staging2;

ALTER TABLE cmi_staging2
ADD COLUMN OCCURENCE int ;

UPDATE cmi_staging2
SET occurence = ROW_NUMBER() OVER(PARTITION BY age, martial_status, email,phone, full_address, job_title, membership_date);


WITH ranked_data AS (
    SELECT 
        member_id,  -- or primary key column
        ROW_NUMBER() OVER (
            PARTITION BY member_id
        ) AS rn
    FROM cmi_staging2
)
UPDATE cmi_staging2
SET occurence = ranked_data.rn
FROM ranked_data;

SELECT * FROM cmi_staging1;
CREATE TABLE cmi_staging3 AS SELECT * FROM cmi_staging1;

CREATE TABLE cmi_staging4 AS
SELECT id,
REGEXP_REPLACE(SPLIT_PART(full_name, ' ', 1), '[^a-zA-Z\-]', '', 'g') AS first_name,
SUBSTRING(full_name FROM '^\s*[^ ]+\s+(.*)$') AS last_name,
age,
martial_status,
email,
phone,
full_address,
job_title,
membership_date
FROM cmi_staging1;
SELECT * FROM cmi_staging1;

SELECT * FROM cmi_staging2;
-- identical to 1 
SELECT * FROM cmi_staging3;
-- identical to 1 but with first and last names
SELECT * FROM cmi_staging4;

SELECT id, COUNT(*) AS occurrences
FROM cmi_staging3
GROUP BY id
HAVING COUNT(*) > 1;

SELECT init

--SELECT age , substr(age::text,1,2) FROM cmi_staging4 WHERE length(age::text) = 3;

UPDATE cmi_staging4
SET age = substr(age::text,1,2)::int
WHERE length(age::text) = 3;

SELECT age
FROM cmi_staging4
--WHERE age::text = ' ';
CREATE TABLE cmi_staging3 AS SELECT * FROM  cmi_staging4;
SELECT * FROM club_members_info;

SELECT CONCAT(
        UPPER(SUBSTRING(first_name, 1, 1)),
        LOWER(SUBSTRING(first_name, 2, LENGTH(first_name)))
    ) as first,
	CONCAT(
        UPPER(SUBSTRING(last_name, 1, 1)),
        LOWER(SUBSTRING(last_name, 2, LENGTH(last_name)))
    ) as last
FROM cmi_staging3;

UPDATE cmi_staging3
SET last_name = CONCAT(
        UPPER(SUBSTRING(last_name, 1, 1)),
        LOWER(SUBSTRING(last_name, 2, LENGTH(last_name)))
    );



SELECT * FROM cmi_staging3;
SELECT martial_status,Count(*) FROM cmi_staging3 GROUP BY martial_status;
SELECT 
CASE
	
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'i'
		THEN replace(lower(job_title), ' i', ', level 1')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'ii'
		THEN replace(lower(job_title), ' ii', ', level 2')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'iii'
		THEN replace(lower(job_title), ' iii', ', level 3')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'iv'
		THEN replace(lower(job_title), ' iv', ', level 4')
	ELSE trim(lower(job_title))
 END AS occupation
FROM cmi_staging4;


UPDATE cmi_staging3 SET job_title = CASE WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'i'
		THEN replace(lower(job_title), ' i', ', level 1')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'ii'
		THEN replace(lower(job_title), ' ii', ', level 2')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'iii'
		THEN replace(lower(job_title), ' iii', ', level 3')
	WHEN array_length(string_to_array(trim(job_title), ' '), 1) > 1 AND
	lower(split_part(job_title, ' ', array_length(string_to_array(trim(job_title), ' '), 1))) = 'iv'
		THEN replace(lower(job_title), ' iv', ', level 4')
	ELSE trim(lower(job_title))
 END

 SELECT Count(*), martial_status FROM cmi_staging3 GROUP BY martial_status;

 UPDATE cmi_staging3 SET martial_status = 'divorced' WHERE martial_status = 'divored';

 SELECT * FROM cmi_staging3;

SELECT 
CASE
	WHEN trim(phone) = '' THEN NULL
	WHEN length(trim(phone)) > 12 THEN trim(phone)
	ELSE trim(phone)
END as phone
FROM cmi_staging3;

UPDATE cmi_staging3
SET phone = CASE
	WHEN trim(phone) = '' THEN NULL
	WHEN length(trim(phone)) > 12 THEN trim(phone)
	ELSE trim(phone)
END;


CREATE TABLE cmi_staging4 AS SELECT * FROM cmi_staging3;


SELECT * FROM cmi_staging4;


SELECT split_part(full_address, ',', 1) as street,
split_part(full_address, ',', 2) as city,
split_part(full_address, ',', 3) as state
FROM cmi_staging4;

ALTER SEQUENCE cmi_staging4 OWNED BY employees.id;


ALTER TABLE cmi_staging4
ADD COLUMN street VARCHAR(255),
ADD  city VARCHAR(255),
ADD  state VARCHAR(255)
;

Update cmi_staging4
SET city = split_part(trim(full_address), ',', 2), state = split_part(trim(full_address), ',', 3)
;

UPDATE cmi_staging4
SET state = 'Texas'
WHERE state = 'Tej+F823as';
UPDATE cmi_staging4
SET state = TRIM(state)


SELECT DISTINCT state ,
count(*)
FROM cmi_staging4
GROUP BY state
HAVING state LIKE 'Te%as'
ORDER BY state;

ALTER TABLE cmi_staging4
DROP column full_address;


SELECT * FROM cmi_staging4;


SELECT * FROM cmi_staging4;

SELECT membership_date, 
SUBSTRING(EXTRACT('year' FROM membership_date)::text)
FROM cmi_staging4;

WITH cte AS(
SELECT year,SUBSTRING(year,1,4) as full_year, CASE 
WHEN SUBSTRING(year,1,2) = '19' THEN REPLACE(year,'19','20')
END as new_year
FROM(SELECT EXTRACT('year' FROM membership_date)::text as year FROM cmi_staging4)
)
SELECT * FROM cte WHERE new_year = '2020'
;


SELECT year,SUBSTRING(year,1,4) as full_year, CASE 
WHEN SUBSTRING(year,1,2) = '19' THEN REPLACE(year,'19','20')
ELSE year
END as new_year
FROM(SELECT EXTRACT('year' FROM membership_date)::text as year FROM cmi_staging4)


SELECT membership_date + INTERVAL '100 years',EXTRACT('year' FROM membership_date)
FROM cmi_staging4
WHERE EXTRACT(YEAR FROM membership_date) BETWEEN 1900 AND 1999;

SELECT membership_date + INTERVAL '100 years',EXTRACT('year' FROM membership_date)
FROM cmi_staging4
WHERE EXTRACT(YEAR FROM membership_date) BETWEEN 1900 AND 1999



SELECT first_name,last_name,age,email,
COUNT(*) as count 
FROM cmi_staging4 
GROUP BY first_name,last_name,age,email
HAVING COUNT(*) >1
;

SELECT email,
COUNT(*) as count 
FROM cmi_staging4 
GROUP BY email
HAVING COUNT(*) >1
;

SELECT member_id,
COUNT(*) as count 
FROM cmi_staging4 
GROUP BY member_id
HAVING COUNT(*) >1
;

SELECT member_id FROM cmi_staging4 WHERE member_id IS NULL;

 -- Delete dublicates
DELETE FROM cmi_staging4 AS cmi1
USING cmi_staging4 AS cmi2
WHERE cmi1.member_id <cmi2.member_id
AND cmi1.email = cmi2.email;


SELECT * FROM cmi_staging4 ORDER BY member_id;

CREATE TABLE backup AS SELECT * FROM cmi_staging4;

UPDATE cmi_staging4
SET member_id = new_id
FROM(SELECT member_id,ROW_NUMBER() OVER(ORDER BY member_id) as new_id FROM cmi_staging4);

ALTER TABLE cmi_staging4
ADD COLUMN new_id int;

-- Resetting member_id

SELECT ctid,member_id,new_id FROM cmi_staging4;
SELECT max(member_id),max(new_id) FROM cmi_staging4;


SELECT ctid, member_id FROM cmi_staging4;


WITH numbered_ids AS (
  SELECT 
    ctid, 
    ROW_NUMBER() OVER (ORDER BY member_id) AS nid 
  FROM cmi_staging4
)
UPDATE cmi_staging4 c
SET member_id = n.nid
FROM numbered_ids n
WHERE c.ctid = n.ctid;

ALTER TABLE cmi_staging4 DROP new_id;

SELECT * FROM cmi_staging4;

COPY cmi_staging4 TO 'D:\club_members_import.csv' DELIMITER ',' CSV HEADER;

SELECT * FROM cmi_staging4;
-- members in martial status
SELECT martial_status,
	COUNT(*) 
FROM cmi_staging4 
GROUP BY martial_status 
ORDER BY COUNT(*) DESC;
-- members in each state
SELECT state as State,
	COUNT(state) as Club_Members
FROM cmi_staging4
GROUP BY  state
ORDER BY COUNT(*) DESC;
-- members registered per year
SELECT EXTRACT('year' FROM membership_date) as Year,
	COUNT(*)
FROM cmi_staging4
GROUP BY Year
ORDER BY Year;